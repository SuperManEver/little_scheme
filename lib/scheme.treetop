grammar Scheme
  rule sexp
    atom / list
  end

  rule list
    space '(' sexps:(sexp space)* ')' space {
      def to_ast
        list_contents = sexps.elements.map{|element| element.sexp.to_ast }
        List.new(*list_contents)
      end
    }
  end

  rule atom
    space [^\s()]+ space {
      def to_ast
        Atom.new(text_value.strip.to_sym)
      end
    }
  end

  rule space
    [\s]*
  end

  rule program
    (sexp space)* {
      def to_asts
        elements.map{ |element| element.sexp.to_ast }
      end
    }
  end
end
